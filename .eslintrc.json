{
  // Настройки проекта
  "env": {
    // Проект для браузера
    "browser": true,
    // Включаем возможности ES6
    "es6": true,
    // Добавляем возможности ES2017
    "es2017": true
  },
  // Наборы правил
  "extends": [
    // Базовый набор правил eslint
    "eslint:recommended",
    "plugin:promise/recommended",
    // Отключаем правила из базового набора
    // "plugin:@typescript-eslint/eslint-recommended",
    // Базовые правила для TypeScript
    "plugin:@typescript-eslint/recommended",
    // Правила TS, требующие инфо о типах
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:prettier/recommended", // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
    "plugin:vue/base"
  ],
  // Движок парсинга
  "parser": "vue-eslint-parser",
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    // Движку нужен проект TS для правил с типами
    "project": "tsconfig.json",
    "tsconfigRootDir": ".",
    "extraFileExtensions": [".vue", ".html"]
  },
  // Плагин с наборами правил для TypeScript
  "plugins": ["prettier", "@typescript-eslint", "promise", "vue"],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "usePrettierrc": true,
        "printWidth": 120
      }
    ],
    "no-shadow": [
      "off",
      {
        "builtinGlobals": false
      }
    ],
    "no-duplicate-imports": [
      "error",
      {
        "includeExports": true
      }
    ],
    "no-template-curly-in-string": "error",
    "block-scoped-var": "error",
    "curly": ["error", "all"],
    "eqeqeq": "error",
    "max-classes-per-file": ["error", 1],
    "no-alert": "error",
    "no-console": ["error", { "allow": ["time", "timeEnd"] }],
    "no-else-return": [
      "error",
      {
        "allowElseIf": false
      }
    ],
    "no-implicit-coercion": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-multi-spaces": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-return-await": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-unused-expressions": "error",
    "no-useless-call": "error",
    "no-useless-concat": "error",
    "no-useless-return": "error",
    "prefer-promise-reject-errors": "error",
    "radix": "error",
    "no-undefined": "error",
    "array-bracket-newline": [
      "off",
      {
        "multiline": true
      }
    ],
    "comma-dangle": "off",
    "comma-style": "error",
    "eol-last": "error",
    "key-spacing": "error",
    "keyword-spacing": "error",
    "new-parens": "error",
    "no-bitwise": "warn",
    "no-lonely-if": "warn",
    "no-multiple-empty-lines": "error",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-tabs": [
      "error",
      {
        "allowIndentationTabs": true
      }
    ],
    "no-trailing-spaces": "error",
    "no-unneeded-ternary": "error",
    "no-whitespace-before-property": "error",
    "object-curly-newline": "error",
    "object-curly-spacing": ["error", "always"],
    "semi-spacing": "error",
    "space-before-blocks": "error",
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-in-parens": "error",
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": ["error", "always"],
    "switch-colon-spacing": "error",
    "arrow-body-style": ["error", "as-needed"],
    "arrow-parens": ["error", "as-needed"],
    "arrow-spacing": "error",
    "no-useless-computed-key": "error",
    "no-useless-rename": "error",
    "object-shorthand": ["error", "always"],
    "prefer-arrow-callback": "warn",
    "prefer-destructuring": "off",
    "rest-spread-spacing": ["error", "never"],
    "sort-imports": "off",
    "template-curly-spacing": "error",
    "optimize-regex/optimize-regex": "warn",
    "@typescript-eslint/no-extra-parens": ["off"],
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi"
        }
      }
    ],
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/no-magic-numbers": [
      "off",
      {
        "ignoreNumericLiteralTypes": true,
        "ignoreEnums": true,
        "enforceConst": true,
        "ignoreReadonlyClassProperties": true,
        "ignore": [0, 1, 24, 60, 1000]
      }
    ],
    "@typescript-eslint/quotes": "error",
    "@typescript-eslint/func-call-spacing": ["error", "never"],
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unnecessary-type-arguments": "warn",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-readonly": "warn",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/explicit-function-return-type": [
      "off",
      {
        "allowExpressions": true
      }
    ],
    "@typescript-eslint/prefer-nullish-coalescing": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^",
        "varsIgnorePattern": "^$"
      }
    ],
    "@typescript-eslint/no-use-before-define": "off",
    "simple-import-sort/imports": [
      "error",
      {
        // The default grouping, but with no blank lines.
        "groups": [["^\\u0000", "^@?\\w", "^[^.]", "^\\."]]
      }
    ],
    "no-case-declarations": "off",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    "promise/catch-or-return": [
      "error",
      {
        "allowFinally": true
      }
    ],
    "vue/html-self-closing": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/typedef": [
      "error",
      {
        "arrayDestructuring": false,
        "arrowParameter": false,
        "memberVariableDeclaration": false,
        "objectDestructuring": false,
        "parameter": true,
        "propertyDeclaration": true,
        "variableDeclaration": false,
        "variableDeclarationIgnoreFunction": true
      }
    ],
    "@typescript-eslint/no-inferrable-types": [
      "error",
      {
        "ignoreParameters": true
      }
    ],
    "camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "(\\w*-\\w*)|(:\\w*)|(@\\w*)|(\\d)",
          "match": false
        }
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "modifiers": ["public", "private", "static"],
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase", "UPPER_CASE"]
      }
    ],
    "@typescript-eslint/no-floating-promises": [
      "off",
      {
        "ignoreVoid": false,
        "ignoreIIFE": false
      }
    ],
    "require-await": "off",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-return": "off"
  }
}
